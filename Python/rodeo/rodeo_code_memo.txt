- egg包：   
python的egg文件有点像java中的jar文件，是一个工程打包文件，便于安装部署，仅此一点，给多少pythoner带来了多少激动。而setup tools就是一个提供包管理的工具或者说是软件。

egg 是一个包含所有包数据的文件包。在理想情况中，egg 是一个使用 zip 压缩的文件，其中包括了所有需要的包文件。但是在某些情况下，setuptools 会决定（或被开关告知）包不应该是 zip 压缩的。在这些情况下，egg 只是一个简单的未曾压缩的子目录，但是里面的内容是相同的。使用单一的版本可以方便地进行转换，并可以节省一点磁盘空间，但是 egg 目录从功能和组织结构上来说都是相同的。

制作egg包的命令如下：python setup.py bdist_egg
需要注意的是，这里setup.py里，setup函数需要用 `from setuptools import setup` 导出，而不能用 `from distutils.core import setup` 导出。

- setup.py 解释：
    + packages: 告诉Distutils需要处理那些包（包含__init__.py的文件夹）
    + package_dir: 告诉Distutils哪些目录下的文件被映射到哪个源码包，感觉好像是一个相对路径的定义。一个例子：package_dir = {'': 'lib'}，表示以lib为主目录。
    + requires: 定义依赖哪些模块。
    + package_data：通常包含与包实现相关的一些数据文件或类似于readme的文件。
    + entry_points：帮助让一个egg包可以被执行，帮助定义可选特性和插件式开发，在uwsgi包里也有这个特性；下面这段代码是说，在成功安装包的前提下，在命令行下，执行命令rodeo，相当于执行了rodeo.cli这个module中的cmd函数，这样做的目的是通过不需要ipython，python命令进入python环境后，就可以以一种比较简单便捷的方法来启动python脚本。相关的可以详细看看： http://lingxiankong.github.io/blog/2013/12/23/python-setup/

```
entry_points={
    'console_scripts': [
        'rodeo = rodeo.cli:cmd',
    ]
}
```


- Kernel:

使用下面语句导出一个IPython的kernel，看来是IPython本身有很方便的支持三方开发。回头继续研究下IPython。 
```
try:
    from jupyter_client import BlockingKernelClient
except ImportError:
    from IPython.kernel import BlockingKernelClient
...
self.client = BlockingKernelClient(connection_file=config)
```


- 包：
    + docopt：Pythonic的命令行参数解析库:
    + subprocess：
    + jedi：Jedi is a static analysis tool for Python that can be used in IDEs/editors. Its historic focus is autocompletion, but does static analysis for now as well. Jedi is fast and is very well tested. It understands Python on a deeper level than all other static analysis frameworks for Python. 简单来说，rodeo这个项目里用jedi来实现自动补全。
    + webbrowser：一个简单的浏览器模块

- 总评：
没有什么核心技术，就是利用了IPython的一个接口来做中继，markdown是用的一个叫markdown2的python第三方包，这点也不是不可，因为前端是直接可以渲染markdown的，没必要到后台来请求。看完这个项目，最大的感触就是，IPython倒是挺强大的，还得花时间多了解了解。
